#!/usr/bin/env python3

DESCRIPTION='''
Grid GEDI L1 and L2 files on the official EASE 2.0 grid
'''

import numpy
import argparse

from gedipy import gedidb
from gedipy import gedigrid
from gedipy import userfunctions


if __name__ == '__main__':
    # Parse command line arguments
    argparser = argparse.ArgumentParser(description=DESCRIPTION,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    argparser.add_argument('output_file', metavar='FILE', type=str,
        help='Output grid filename')
    argparser.add_argument('-d', '--dataset', metavar='STR', type=str,
        help='H5 dataset name to grid')
    argparser.add_argument('-f', '--file-list', metavar='FILE', type=str,
        help='File containing paths to the L1B/L2A/L2B files (one per line)')
    argparser.add_argument('-r', '--resolution', metavar='INT', type=int, default=1000, 
        choices=[100,500,1000,3000,9000,18000,24000],
        help='Spatial resolution of output grid (m)')
    argparser.add_argument('-s', '--sensitivity', metavar='FLOAT', type=float, default=0.9,
        help='Additional beam senstivity threshold filter to apply')
    argparser.add_argument('-b', '--bbox', metavar='FLOAT', nargs=4, type=float,
        help='Geographic coordinate bounding box to clip the grid to [minx maxy maxx miny]')
    argparser.add_argument('userfunc', metavar='STR', type=str, default='simple_stats',
        help='Running grid statistics compute')    
    args = argparser.parse_args()

    # Load file database
    file_database = gedidb.FileDatabase()
    if args.file_list:
        file_database.add_file_list(args.file_list)
    else:
        print('error: the --file-list option must be specified.')
        exit(1)

    # Get the rasterio profile we want for the output grid
    rio_profile = gedigrid.GEDIPY_RIO_DEFAULT_PROFILE

    # Setup the GEDI grid
    gedi_grid = gedigrid.GEDIGrid(profile=rio_profile)
    if args.resolution >= 1000:
        gedi_grid.initialize_gedi_ease2_grid(bbox=args.bbox, resolution=args.resolution)
    else:
        gedi_grid.initialize_gedi_ease2_grid(bbox=args.bbox)
        gedi_grid.zoom_gedi_grid(resolution=args.resolution)

    # Loop through each h5 file and beam
    number_of_files = len(file_database.file_by_orbit)
    for i,orbit in enumerate(file_database.file_by_orbit):
        h5file = file_database.get_file(orbit)
        if h5file:
            print('Gridding {} ({}/{})'.format(h5file.filename, i+1, number_of_files), flush=True)
            h5file.open()
            for beam in h5file.beams:
                longitude, latitude = h5file.get_coordinates()
                quality = h5file.get_quality_flag(sensitivity=args.sensitivity)
                dataset = h5file.get_dataset(args.dataset)
                gedi_grid.add_data(longitude[quality], latitude[quality], dataset[quality], func=args.userfunc)
            h5file.close()

    # Finalize and write the result
    if args.userfunc == 'simple_stats':
        gedi_grid.outgrid = userfunctions.finalize_simple_stats(gedi_grid.outgrid, 
            gain=10000, offset=0, null=numpy.iinfo(numpy.uint16).max)
    gedi_grid.write_grid()

