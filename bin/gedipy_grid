#!/usr/bin/env python3

DESCRIPTION='''
Grid lidar h5 files on the official GEDI EASE 2.0 grid
'''

import numpy
import argparse
from tqdm import tqdm

from gedipy import gedidb
from gedipy import gedigrid


if __name__ == '__main__':
    # Parse command line arguments
    argparser = argparse.ArgumentParser(description=DESCRIPTION,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    argparser.add_argument('output_file', metavar='FILE', type=str,
        help='Output GeoTiff grid filename')
    argparser.add_argument('-d', '--dataset', metavar='STR', type=str,
        help='H5 dataset name to grid')
    argparser.add_argument('-r', '--reference_image', metavar='STR', type=str,
        help='Reference image used to define output grid')
    argparser.add_argument('-g', '--grid_config', metavar='STR', type=str,
        help='JSON configuration file used to define output grid')
    argparser.add_argument('-f', '--file-list', metavar='FILE', type=str,
        help='File containing paths to the H5 files (one per line)')
    argparser.add_argument('-F', '--files', metavar='FILE', nargs='+',
        help='H5 file paths (space delimited)')
    argparser.add_argument('-R', '--resolution', metavar='INT', type=int, default=1000,
        choices=[100,500,1000,3000,9000,18000,24000,72000],
        help='Spatial resolution of output GEDI EASE 2.0 grid (m)')
    argparser.add_argument('-i', '--index', metavar='INT', type=int, default=None,
        help='Dateset index to grid for 2D datasets')
    argparser.add_argument('-G', '--gedi_domain', metavar='FLOAT', type=float, default=52,
        help='Latitudinal extent of the GEDI domain for EASE 2.0 grids (degrees)')
    argparser.add_argument('-s', '--sensitivity', metavar='FLOAT', type=float, default=0.9,
        help='Additional GEDI beam sensitivity threshold filter to apply')
    argparser.add_argument('-b', '--bbox', metavar='FLOAT', nargs=4, type=float,
        help='Geographic coordinate bounding box to clip the grid to [minx maxy maxx miny]')
    argparser.add_argument('-u','--userfunc', metavar='STR', type=str, default='grid_moments',
        choices=['grid_moments','grid_quantiles','grid_counts'],
        help='Running grid statistics to compute (grid_quantiles is experimental)')
    argparser.add_argument('-q', '--quantiles', metavar='FLOAT', nargs='+', type=float,
        default=[0.0,0.25,0.5,0.75,1.0],
        help='Quantiles to compute for the grid_quantiles userfunc')
    args = argparser.parse_args()

    # Load file database
    file_database = gedidb.FileDatabase()
    if args.file_list:
        file_database.add_file_list(args.file_list)
    else:
        if len(args.files) > 0:
            for fn in args.files:
                file_database.add_file(fn)
        else:
            print('error: the --file-list or --files option must be specified.')
            exit(1)

    # Select the gridding algorithm parameters
    if args.userfunc == 'grid_moments':
        nbands = 5
        dtype = 'float32'
        nodata = -9999
    elif args.userfunc == 'grid_quantiles':
        nbands = len(args.quantiles) + 1
        dtype = 'float32'
        nodata = -9999
    elif args.userfunc == 'grid_counts':
        nbands = 3
        dtype = 'uint16'
        nodata = numpy.iinfo(numpy.uint16).max
        args.dataset = 'shot_number'
    else:
        nbands = 1
        dtype = 'float32'
        nodata = -9999

    # Setup the GEDI grid
    gedi_grid = gedigrid.GEDIGrid(profile=gedigrid.GEDIPY_RIO_DEFAULT_PROFILE)
    if args.reference_image:
        gedi_grid.init_grid_from_reference(args.reference_image, count=nbands,
            dtype=dtype, nodata=nodata)
    elif args.grid_config:
        gedi_grid.init_grid_from_config(args.grid_config, count=nbands)
    else:
        gedi_grid.init_gedi_ease2_grid(bbox=args.bbox, resolution=args.resolution,
            gedi_domain=args.gedi_domain, count=nbands, dtype=dtype, nodata=nodata)

    # Loop through each h5 file and beam
    number_of_files = len(file_database.file_by_orbit)
    for orbit in tqdm(file_database.file_by_orbit):
        h5file = file_database.get_file(orbit)
        if h5file:
            h5file.open_h5()
            for beam in h5file.beams:
                longitude, latitude = h5file.get_coordinates(beam)
                dataset = h5file.get_dataset(beam, args.dataset, index=args.index)
                quality = h5file.get_quality_flag(beam, sensitivity=args.sensitivity,
                    nonull=args.dataset, index=args.index)
                gedi_grid.add_data(longitude[quality], latitude[quality], dataset[quality],
                    func=args.userfunc, quantiles=args.quantiles, step=0.1)
            h5file.close_h5()

    # Finalize and write the result
    gedi_grid.finalize_grid(gain=1, offset=0, func=args.userfunc)
    gedi_grid.write_grid(args.output_file)
